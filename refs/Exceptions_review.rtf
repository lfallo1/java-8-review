{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf130
{\fonttbl\f0\fswiss\fcharset0 ArialMT;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red27\green29\blue31;\red255\green255\blue255;\red235\green236\blue237;
\red230\green230\blue230;\red255\green247\blue212;\red37\green127\blue159;\red36\green38\blue41;\red13\green0\blue129;
\red43\green39\blue19;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}}
\margl1440\margr1440\vieww23340\viewh7420\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\sl264\slmult1\pardirnatural\partightenfactor0

\f0\b\fs28 \cf0 EXCEPTION HIERARCHY
\b0\fs24 \
Throwable\
Error\
Exception\
RuntimeException\
\
\

\b\fs28 SUMMARY
\b0\fs24 \
\pard\pardeftab720\partightenfactor0

\b\fs22 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Throwable
\b0  is at the top off all exceptions. Underneath Throwable you have Error and Exception. Underneath Exception you have RuntimeException.\
\
\ul Java has two types of exceptions\ulnone  - 
\b checked
\b0  and 
\b unchecked
\b0 . 
\b Checked exceptions
\b0  are enforced by the compiler (you have to declare them in the throws clause and catch them eventually). 
\b Unchecked exceptions
\b0  are not enforced for catching or declaring in throws clause.\
\

\b Throwable
\b0  exists so that there is a parent for all exception types.\
\

\b Error
\b0  exists to indicate issues with the runtime environment, things that your program probably cannot recover from, such as a badly formatted class file or the VM running out of memory.\
\

\b Exception
\b0  exists as the root for all non-programmer errors (see RuntimeException for the "exception" to this) , such as a file cannot be created because the disk is full. \ul You should not throw, throws, or catch Exception\ulnone . \
\

\b RuntimeException
\b0  exists to indicate all programmer error, such as going past the end of an array or calling a method on a null object. These are things that you should fix so that they do not throw exceptions - the indicate that you, the programmer, screwed up the code.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\sl288\slmult1\pardirnatural\partightenfactor0
\cf0 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\sl264\slmult1\pardirnatural\partightenfactor0

\fs24 \cf0 \
\
\pard\tx720\pardeftab720\sl264\slmult1\partightenfactor0

\b \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Error
\b0  (throws by VM, should not be caught or handled, same goes for 
\b Throwable
\b0 )\
\pard\tx220\tx720\tx1440\pardeftab720\li720\fi-720\sl264\slmult1\partightenfactor0
\ls1\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 VM Error\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Assertion Error\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Linkage Error ...so on\
\pard\tx720\tx1440\pardeftab720\sl264\slmult1\partightenfactor0
\cf2 \cb1 \
\pard\tx720\pardeftab720\sl264\slmult1\partightenfactor0

\b \cf2 \cb3 Runtime/Unchecked Exception
\b0  (handling is optional\'85 ideally, just write good code)\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl264\slmult1\partightenfactor0
\ls2\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 NullPointerException\cb1 \
\ls2\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 ArrayIndexOutOfBoundException\cb1 \
\ls2\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 IllegalArgumentException ... so on\
\pard\tx720\pardeftab720\sl264\slmult1\partightenfactor0
\cf2 \cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl264\slmult1\partightenfactor0
\ls3\ilvl0
\b \cf2 \cb3 Check Exception
\b0 - have to be either caught or declared in the method signature using \cb4 throws\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
{\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 IOException\cb1 \
\ls3\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 FileNotFoundException\cb1 \
\ls3\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 SQLException ...so on\
\pard\tx720\tx1440\pardeftab720\sl264\slmult1\partightenfactor0
\cf2 \cb1 \
\pard\tx720\pardeftab720\sl264\slmult1\partightenfactor0
\cf2 \cb4 throw\cb3  explicitly throws an exception object you created. \cb4 throw new NullPointerException();\cb3  works perfectly fine\
\cb1 \
\cb4 throws\cb3  declares that a method may throw that exception. With unchecked exceptions this is optional, but can be useful to document the fact (again, one would normally not declared \cb4 throws NullPointerException\cb3  because that is pretty much a given).\cb1 \
\pard\tx720\tx1440\pardeftab720\sl264\slmult1\partightenfactor0
\cf2 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\sl264\slmult1\pardirnatural\partightenfactor0

\b \cf0 \cb5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 finally
\b0 \cb1  gets called always (on all levels), if the code has entered its corresponding try/catch (but could itself throw an exception and is not \'93protected\'94 by its preceding try/catch)\
- Never return a value from finally (for obvious reasons\'85 that method will always return the same value, whatever is in the try block).\
- Important note on behavior inside the finally\
\
\pard\pardeftab720\sl340\partightenfactor0

\fs30 \cf2 \cb6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 If execution of the try block completes abruptly for any other reason R, then the finally block is executed, and then there is a choice:
\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\pard\pardeftab720\sl300\partightenfactor0

\f1\fs26 \cf7 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 If\cf8 \strokec8  the \cf9 \strokec9 finally\cf8 \strokec8  block completes normally, then the \cf9 \strokec9 try\cf8 \strokec8  statement\
   completes  abruptly \cf9 \strokec9 for\cf8 \strokec8  reason R.\
\
   \cf7 \strokec7 If\cf8 \strokec8  the \cf9 \strokec9 finally\cf8 \strokec8  block completes abruptly \cf9 \strokec9 for\cf8 \strokec8  reason S, then the \cf9 \strokec9 try\cf8 \strokec8 \
   statement  completes abruptly \cf9 \strokec9 for\cf8 \strokec8  reason S (and reason R is\
   discarded).\cf10 \strokec10 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\sl264\slmult1\pardirnatural\partightenfactor0
\cf0 \

\b NESTED EXCEPTIONS
\b0 \
thrown exceptions will bubble up until caught.  once caught, the program will continue execution (unless the catch block itself throws the exception).\
\
}